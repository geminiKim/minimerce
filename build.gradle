buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
		springIOPlatformVersion = 'Brussels-SR2'
		gradleDependencyManagementPluginVersion = '1.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("io.spring.gradle:dependency-management-plugin:${gradleDependencyManagementPluginVersion}")
		classpath("io.franzbecker:gradle-lombok:1.8")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.franzbecker.gradle-lombok'

dependencyManagement {
	imports {
		mavenBom "io.spring.platform:platform-bom:${springIOPlatformVersion}"
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('javax.inject:javax.inject')
	compile('org.hibernate:hibernate-java8')
	compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
	compile('com.querydsl:querydsl-jpa')
	compile('com.querydsl:querydsl-core')
	compile('com.querydsl:querydsl-apt')
	compile('org.apache.commons:commons-lang3')
	compile('commons-codec:commons-codec')
	compile('com.google.guava:guava')
	compile('com.zaxxer:HikariCP')
	compile('io.springfox:springfox-swagger2:2.7.0')
	compile('io.springfox:springfox-swagger-ui:2.7.0')
	compileOnly('org.projectlombok:lombok')
	runtime('mysql:mysql-connector-java')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

/**** Test Tasks ****/
test {
	useJUnit {
		excludeCategories 'com.minimerce.IntegrationTest'
	}
}
task integrationTest(type: Test, group: 'verification') {
	useJUnit {
		includeCategories 'com.minimerce.IntegrationTest'
	}
}
task wholeTest(type: Test, group: 'verification') { useJUnit { } }

/**** QueryDSL Class Generate Script ****/
def queryDslOutput = file("src/main/generated")
sourceSets {
	main {
		java {
			srcDir queryDslOutput
		}
	}
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
	source = sourceSets.main.java
	classpath = configurations.compile
	destinationDir = queryDslOutput
	options.compilerArgs = [
			"-proc:only",
			"-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
	]
}
compileJava.dependsOn(generateQueryDSL)

clean {
	delete queryDslOutput
}
